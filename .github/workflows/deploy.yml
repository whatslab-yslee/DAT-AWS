name: Build and Deploy to ECS (Fargate)

on:
  workflow_dispatch:
    inputs:
      without_db_migration:
        description: 'Skip database migration'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: whatslab/dat
  IMAGE_TAG: latest
  ECS_CLUSTER: whatslab-dat-ecs # Fargate 클러스터명
  ECS_SERVICE: dat-service # ECS 서비스명
  TASK_DEFINITION_NAME: dat-task # ECS 태스크 정의명
  ECS_CONTAINER_NAME: dat-container # ECS 태스크 정의에서 컨테이너 이름

  SUBNETS: subnet-0234d2d0f023527b9
  SECURITY_GROUPS: sg-06689ae31de922a95
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ROLE_TO_ASSUME: ${{ secrets.ROLE_TO_ASSUME }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 2) DB 마이그레이션 (One-Off ECS Task)
  migrate:
    name: Run DB Migration
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !inputs.without_db_migration }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run ECS Task (Alembic Upgrade)
        id: run-task
        run: |
          echo "Running DB migration as a one-off task..."

          TASK_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.SUBNETS }}],securityGroups=[${{ env.SECURITY_GROUPS }}],assignPublicIp=DISABLED}" \
            --task-definition ${{ env.TASK_DEFINITION_NAME }} \
            --overrides '{
              "containerOverrides": [
                {
                  "name": "${{ env.ECS_CONTAINER_NAME }}",
                  "command": ["sh", "-c", "cd /app/backend && alembic upgrade head"]
                }
              ]
            }' \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Task ARN: $TASK_ARN"

          # 마이그레이션이 끝날 때까지 대기
          aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER }} --tasks "$TASK_ARN"

          # Exit Code 확인
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks "$TASK_ARN" \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          echo "Migration container exit code: $EXIT_CODE"

          # 실패(0이 아님)면 워크플로우 중단
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "Migration failed"
            exit 1
          fi

  deploy:
    name: Update ECS Service (Fargate)
    runs-on: ubuntu-latest
    needs: [build, migrate]
    if: always() && (needs.migrate.result == 'success' || needs.migrate.result == 'skipped')
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force New Deployment
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment
